// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  userType UserType
  student  Student?
  cafe     Cafe?
  rider    Rider?
}

model Student {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phoneNo   String   @unique
  Order     Order[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Cafe {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  name          String
  img           String?      @default("cafe_placeholder_dc8er7")
  email         String       @unique
  password      String
  phoneNo       String       @unique
  loc           Location     @relation(fields: [locId], references: [id])
  cafeCategory  CafeCategory @default(FOOD)
  locId         String
  operatingHour String
  status        Boolean      @default(true)
  products      Product[]
  order         Order[]
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @unique
  Promo         Promo[]
}

model Rider {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  firstName    String
  lastName     String
  email        String       @unique
  password     String
  phoneNo      String       @unique
  deliveryMode DeliveryMode
  vehicleNo    String?
  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique
}

model Product {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  name            String
  img             String
  productCategory ProductCategory
  desc            String?
  price           Decimal
  availability    Boolean         @default(true)
  cafe            Cafe            @relation(fields: [cafeId], references: [id])
  cafeId          String
  // OrderLine       OrderLine[]
}

model Order {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  totalPrice     Decimal
  products       Json[]
  status         Status
  intentId       String?        @unique
  student        Student        @relation(fields: [studentId], references: [id])
  studentId      String
  paymentType    PaymentType
  cafe           Cafe           @relation(fields: [cafeId], references: [id])
  cafeId         String
  cutleryOption  Boolean?       @default(false)
  deliveryOption DeliveryOption
  // OrderLine  OrderLine[]
}

// model OrderLine {
//   id          String  @id @default(cuid())
//   product     Product @relation(fields: [productId], references: [id])
//   productId   String
//   order       Order   @relation(fields: [orderId], references: [id])
//   orderId     String
//   quantity    Int
//   studentNote String?
// }

model Promo {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  type             PromoType
  discount         Decimal
  min_spend_amount Decimal
  capped_amount    Decimal
  amount           Decimal?
  status           Boolean   @default(true)
  cafe             Cafe      @relation(fields: [cafeId], references: [id])
  cafeId           String
}

model Location {
  id       String @id @default(cuid())
  location String
  Cafe     Cafe[]
}

enum PromoType {
  DELIVERY_VOUCHER
  DISCOUNT_VOUCHER
}

enum CafeCategory {
  FOOD
  BEVERAGE
  BOTH
}

enum ProductCategory {
  NOODLE
  RICE
  WESTERN
  BEVERAGE
}

enum DeliveryMode {
  CAR
  MOTORCYCLE
  BYFOOT
}

enum Status {
  DRAFT
  PREPARING
  PICKUP
  DELIVERING
  COMPLETED
}

enum PaymentType {
  CASH
  ONLINE
}

enum DeliveryOption {
  DELIVERY
  PICKUP
}

enum UserType {
  STUDENT
  CAFE
  RIDER
}
